import { Telegraf } from 'telegraf';

const TG_BOT_TOKEN = process.env.TG_BOT_TOKEN;

if (!TG_BOT_TOKEN) {
    console.log("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω");
};

const tgBot = new Telegraf(TG_BOT_TOKEN);

tgBot.start(async (ctx) => {
    console.log('ctx payload: ', ctx.payload)
    const payload = ctx.payload;

    const appUrl = payload
        ? `https://t.me/PiggyClickerBot/game?startapp=${payload}`
        : `https://t.me/PiggyClickerBot/game`;

    try {
        await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Piggy Clicker üê∑!", {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "–ò–≥—Ä–∞—Ç—å", web_app: { url: appUrl }, }]
                ],
                resize_keyboard: true,
            },
        });
    } catch (err) {
        if (err.response?.error_code === 403) {
            console.warn(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`);
        } else {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err);
        }
    }
});

// –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (long polling)
tgBot.launch()
    .then(() => console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"))
    .catch((err) => console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:", err));

export { tgBot };
